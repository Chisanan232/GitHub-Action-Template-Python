##############################################################################################
#
# Workflow Description:
#     Build a git tag on a specific commit in every git branch. And create GitHub release if current git branch is 'master'.
#
# Workflow input parameters:
#     * General arguments:
#         * project_type: Different project type would get the software version info in different way.
#         * activate_git_event: Which git event should activate the workflow.
#         * debug_mode: It would run the tasks as log message, doesn't essentially run feature if this option is true.
#
# Workflow running output:
#     Yes, it has running result output. The output is the release version.
#
##############################################################################################

name: Build git tag and create GitHub release with software version

on:
  workflow_call:
    inputs:
      project_type:
        description: "Different project type would get the software version info in different way."
        required: true
        type: string    # Option: python, github-action_reusable-workflow
      activate_git_event:
        description: "Which git event should activate the workflow."
        type: string
        required: false
        default: push
      debug_mode:
        description: "It would run the tasks as log message, doesn't essentially run feature if this option is true."
        type: boolean
        required: false
        default: false

    outputs:
      python_release_version:
        description: "The version which would be build as git tag and create GitHub release version title."
        value: ${{ jobs.build_git-tag_and_create_github-release.outputs.matrix_python }}
      github-action_reusable_workflow_release_version:
        description: "The version which would be build as git tag and create GitHub release version title."
        value: ${{ jobs.build_git-tag_and_create_github-release.outputs.matrix_github_action_reusable_workflow }}


jobs:
  build_git-tag_and_create_github-release:
#    name: Build git tag and GitHub release if it needs
    if: ${{ github.event_name == inputs.activate_git_event }}
    runs-on: ubuntu-latest
    outputs:
      matrix_python: ${{ steps.release_checking.outputs.release_version }}
      matrix_github_action_reusable_workflow: ${{ steps.release_checking.outputs.release_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download shell script for checking input parameters
        run: curl https://raw.githubusercontent.com/Chisanan232/GitHub-Action_Workflow-Template-Python/develop/scripts/ci/build_git-tag_or_create_github-release.sh --output ./scripts/ci/build_git-tag_or_create_github-release.sh

      # This flow for the project type is Python project
      - name: Build git tag and create GitHub release
        if: ${{ inputs.project_type == 'python-package' }}
        id: python_release
        run: | 
          release=$(bash ./scripts/ci/build_git-tag_or_create_github-release.sh ${{ inputs.project_type }}  ${{ inputs.debug_mode }} $PYTHON_PACKAGE_NAME $SOFTWARE_VERSION_STYLE)
          echo "release: $release"

          release_version=$(echo "$release" | grep -E "\[Python\] \[Final Running Result\] ((Official\-Release)|(Pre\-Release))" | grep -E -o "((Official\-Release)|(Pre\-Release))")
          echo "release_version: $release_version"

          echo "::set-output name=release_version::$(echo $release_version)"

      # This flow for the project type is GitHub Action reusable workflow
      - name: Build git tag and create GitHub release
        if: ${{ inputs.project_type == 'github-action-reusable-workflow' }}
        id: github_action_reusable_workflow_release
        run: | 
          release=$(bash ./scripts/ci/build_git-tag_or_create_github-release.sh ${{ inputs.project_type }} ${{ inputs.debug_mode }})
          echo "release: $release"

          release_version=$(echo "$release" | grep -E "\[GitHub Action - Reusable workflow\] \[Final Running Result\] Official-Release and version: ([0-9]{1,})" | grep -E -o "([0-9]{1,})")
          echo "release_version: $release_version"

          echo "::set-output name=release_version::$(echo $release_version)"

