############################################################################
#
# Workflow Description:
#     Run testing by specific type with all test items via PyTest and generate its testing
#     coverage report (it would save reports by 'actions/upload-artifact@v3').
#
# Workflow input parameters:
#     * test_type: The testing type. In generally, it only has 2 options: 'unit-test' and 'integration-test'.
#     * all_test_items_paths: The target paths of test items under test.
#     * setup_http_server: If it's true, it would set up and run HTTP server for testing.
#     * http_server_host: The host IPv4 address of HTTP server.
#     * http_server_port: The port number of HTTP server.
#     * http_server_app_module: The module path of HTTP server.
#     * http_server_enter_point: The object about the web application.
#
# Workflow running output:
#     No, but it would save the testing coverage reports to provide after-process to organize and record.
#
############################################################################

name: Run test items via PyTest

on:
  workflow_call:
    inputs:
      test_type:
        description: "The testing type. In generally, it only has 2 options: 'unit-test' and 'integration-test'."
        required: true
        type: string
      all_test_items_paths:
        description: "The target paths of test items under test."
        required: true
        type: string
      setup_http_server:
        description: "If it's true, it would set up and run HTTP server for testing."
        type: boolean
        required: false
        default: false
      http_server_host:
        description: "The host IPv4 address of HTTP server."
        type: string
        required: false
        default: 0.0.0.0
      http_server_port:
        description: "The port number of HTTP server."
        type: string
        required: false
        default: 12345
      http_server_app_module:
        description: "The module path of HTTP server."
        type: string
        required: false
        default: app
      http_server_enter_point:
        description: "The object about the web application."
        type: string
        required: false
        default: app

    secrets:
      codecov_token:
        description: "The API token for uploading testing coverage report to Codecov."
        required: false
      coveralls_token:
        description: "The API token for uploading testing coverage report to Coveralls."
        required: false
      codacy_token:
        description: "The API token for uploading testing coverage report to Codacy."
        required: false


jobs:
  run_test_items:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
#        python-version: [3.6,3.7,3.8,3.9,'3.10']
#        os: [ubuntu-18.04,ubuntu-20.04,ubuntu-22.04,macos-10.15,macos-11,macos-12]
        python-version: ['3.10']
        os: [ubuntu-22.04]
        exclude:
          - os: ubuntu-18.04
            python-version: 3.6
          - os: ubuntu-18.04
            python-version: 3.9
          - os: ubuntu-18.04
            python-version: '3.10'
          - os: ubuntu-20.04
            python-version: 3.8
          - os: ubuntu-20.04
            python-version: 3.9
          - os: ubuntu-22.04
            python-version: 3.6
          - os: macos-10.15
            python-version: 3.6
          - os: macos-10.15
            python-version: 3.8
          - os: macos-11
            python-version: 3.6
          - os: macos-11
            python-version: 3.9
          - os: macos-12
            python-version: 3.6
        test-path: ${{fromJson(inputs.all_test_items_paths)}}

    steps:
      - uses: actions/checkout@v2

      - name: Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U pip
          pip install -U -r ./requirements/requirements.txt
          pip install -U -r ./requirements/requirements-test.txt

      - name: Setup and run HTTP server for testing
        if: ${{ inputs.setup_http_server == true }}
        run: gunicorn --bind ${{ inputs.http_server_host }}:${{ inputs.http_server_port }} '${{ inputs.http_server_app_module }}:${{ inputs.http_server_enter_point }}' --daemon

      - name: Test to send HTTP request to sample HTTP server
        if: ${{ inputs.setup_http_server == true }}
        run: curl "http://${{ inputs.http_server_host }}:${{ inputs.http_server_port }}/exchangeReport/STOCK_DAY?response=json&date=20170101&stockNo=2331"

      - name: Run tests with pytest
        run: pytest ${{ matrix.test-path }}
        continue-on-error: true

      - name: Combine all testing code coverage result files with all test types
        run: | 
          coverage report
          coverage xml

      - name: Upload coverage report to Codecov https://codecov.io
#        if: ${{ inputs.upload-to-codecov == true }}
#### Way 1
#        run: bash <(curl -s https://codecov.io/bash)
#### Way 2
        run: codecov -t ${{ secrets.codecov_token }}
#### Way 3
#        uses: codecov/codecov-action@v2
#        with:
#          file: .coverage
#          token: ${{ secrets.codecov_token }} # not required for public repos
#          files:  ./coverage.xml
##          flags: ${{ inputs.codecov_flags }} # optional
##          env_vars: OS,PYTHON # optional
##          name: ${{ inputs.codecov_name }} # optional
#          fail_ci_if_error: true # optional (default = false)
#          verbose: true # optional (default = false)

      - name: Install Python dependencies about tool of Coveralls
#        if: ${{ inputs.upload-to-coveralls == true }}
        run: pip3 install coveralls

      - name: Upload coverage report to Coveralls https://coveralls.io
#        if: ${{ inputs.upload-to-coveralls == true }}
        env:
          GITHUB_TOKEN: ${{ secrets.coveralls_token }}
        run: coveralls --verbose

      - name: Upload testing report to Codacy https://app.codacy.com/
#        if: ${{ inputs.upload-to-codacy == true }}
        uses: codacy/codacy-coverage-reporter-action@v1
        with:
          project-token: ${{ secrets.codacy_token }}
          coverage-reports: coverage.xml
#          coverage-reports: cobertura.xml

      - name: Rename the code coverage result file
        run: mv ./.coverage ./.coverage.${{ inputs.test_type }}.${{ matrix.os }}-${{ matrix.python-version }}

      - name: Upload code coverage result file
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: .coverage.${{ inputs.test_type }}.${{ matrix.os }}-${{ matrix.python-version }}
          if-no-files-found: error

