############################################################################
#
# Workflow Description:
#     Run testing by specific type with all test items via PyTest and generate its testing
#     coverage report (it would save reports by 'actions/upload-artifact@v3').
#
# Workflow input parameters:
#     * test_type: The testing type. In generally, it only has 2 options: 'unit-test' and 'integration-test'.
#     * all_test_items_paths: The target paths of test items under test.
#
# Workflow running output:
#     No, but it would save the testing coverage reports to provide after-process to organize and record.
#
############################################################################

name: Run test items via PyTest

on:
  workflow_call:
    inputs:
      test_type:
        description: "The testing type. In generally, it only has 2 options: 'unit-test' and 'integration-test'."
        required: true
        type: string
      all_test_items_paths:
        description: "The target paths of test items under test."
        required: true
        type: string
      http_server:
        description: "If it's true, it would setup and run a sample HTTP server."
        type: boolean
        required: false
        default: false
      dockerfile:
        description: "The file path of Dockerfile."
        required: false
        type: string
      docker_container_name:
        description: "The name of docker container."
        required: false
        default: gh_ci_container
        type: string
      docker_cmd_options:
        description: "The command options of 'docker run'."
        required: false
        type: string
      docker_image_tag:
        description: "The tag of image which be built by Dockerfile."
        required: false
        default: gh_ci_container:v0
        type: string
      docker_context_path:
        description: "The path where is the context path of Dockerfile."
        required: false
        default: ./
        type: string


jobs:
  run_test_items:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        python-version: [3.6,3.7,3.8,3.9,'3.10']
        os: [ubuntu-18.04,ubuntu-20.04,ubuntu-22.04, macos-10.15,macos-11,macos-12]
        exclude:
          - os: ubuntu-18.04
            python-version: 3.6
          - os: ubuntu-18.04
            python-version: 3.9
          - os: ubuntu-18.04
            python-version: '3.10'
          - os: ubuntu-20.04
            python-version: 3.8
          - os: ubuntu-20.04
            python-version: 3.9
          - os: ubuntu-22.04
            python-version: 3.6
          - os: macos-10.15
            python-version: 3.6
          - os: macos-10.15
            python-version: 3.8
          - os: macos-11
            python-version: 3.6
          - os: macos-11
            python-version: 3.9
          - os: macos-12
            python-version: 3.6
        test-path: ${{fromJson(inputs.all_test_items_paths)}}

    steps:
      - uses: actions/checkout@v2

#      - name: Build Docker image via Dockerfile
#        if: ${{ inputs.dockerfile }}
#        run: |
#          docker build -t ${{ inputs.docker_image_tag }} ${{ inputs.docker_context_path }} -f ${{ inputs.dockerfile }}
#          docker images
#
#      - name: Run docker container with docker image
#        if: ${{ inputs.dockerfile }}
#        run: |
#          docker run --name ${{ inputs.docker_container_name }} ${{ inputs.docker_cmd_options }} -d ${{ inputs.docker_image_tag }}
#          docker ps -a

      - name: Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

#      - name: Install dependencies by cloning from GitHub MultiRunnable
#        run: |
#          git clone https://github.com/Chisanan232/multirunnable.git -b master ./multirunnable
#          sudo python ./multirunnable/setup.py install
#          pip install -r ./multirunnable/dev-requirements.txt

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U pip
          pip install -U -r ./requirements/requirements.txt
          pip install -U -r ./requirements/requirements-test.txt

      - name: Setup and run HTTP server for testing
        if: ${{ inputs.http_server == true }}
        run: gunicorn --bind 0.0.0.0:12345 'test._http_server.app:app'

      - name: Run tests with pytest
        run: pytest ${{ matrix.test-path }}
        continue-on-error: true

      - name: Rename the code coverage result file
        run: mv ./.coverage ./.coverage.${{ inputs.test_type }}.${{ matrix.os }}-${{ matrix.python-version }}

      - name: Upload code coverage result file
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: .coverage.${{ inputs.test_type }}.${{ matrix.os }}-${{ matrix.python-version }}
          if-no-files-found: error

