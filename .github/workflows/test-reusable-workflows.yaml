name: github-action reusable workflows test
on:
  push:
    branches:
      - "develop"
      - "release"
      - "release-**"
      - "release/**"
      - "master"
    paths-ignore:
      - ".gitcommitrules"
      - ".gitignore"
      - "LICENSE"
      - "README.md"
  pull_request:
    branches:
      - "develop"
      - "release"
      - "release-**"
      - "release/**"
    paths-ignore:
      - ".gitcommitrules"
      - ".gitignore"
      - "LICENSE"
      - "README.md"

jobs:

  prep-testbed_unit-test:
#    name: Prepare all unit test items
    uses: ./.github/workflows/prepare_test_items.yaml
    with:
      shell_path: scripts/ci/get-unit-test-paths.sh
      shell_arg: unix


  prep-testbed_integration-test:
#    name: Prepare all integration test items
    uses: ./.github/workflows/prepare_test_items.yaml
    with:
      shell_path: scripts/ci/get-integration-test-paths.sh
      shell_arg: unix


  run_unit-test:
#    name: Run all unit test items
    needs: prep-testbed_unit-test
    uses: ./.github/workflows/run_test_items_via_pytest.yaml
    with:
      test_type: unit-test
      all_test_items_paths: ${{needs.prep-testbed_unit-test.outputs.all_test_items}}


  run_integration-test:
#    name: Run all integration test items. This testing would test the code with other resource or system to ensure the features work finely.
    needs: prep-testbed_integration-test
    uses: ./.github/workflows/run_test_items_via_pytest.yaml
    with:
      test_type: integration-test
      all_test_items_paths: ${{needs.prep-testbed_integration-test.outputs.all_test_items}}
      setup_http_server: true
      http_server_host: 0.0.0.0
      http_server_port: 30303
      http_server_app_module: _http_server.app
      http_server_enter_point: app


  unit-test_codecov:
#    name: Organize and generate the testing report and upload it to Codecov
    needs: run_unit-test
    uses: ./.github/workflows/organize_and_generate_testing_reports.yaml
    with:
      test_type: unit-test
#      generate_xml_report_finally: false


  integration-test_codecov:
#    name: Organize and generate the testing report and upload it to Codecov
    needs: run_integration-test
    uses: ./.github/workflows/organize_and_generate_testing_reports.yaml
    with:
      test_type: integration-test
#      generate_xml_report_finally: false


#  organize_all-test_codecov_and_generate_report:
##    name: Organize and generate the testing report and upload it to Codecov
##    needs: [unit-test_codecov, integration-test_codecov]
#    needs: [run_unit-test, run_integration-test]
#    uses: ./.github/workflows/organize_and_generate_testing_coverage_reports.yaml
#    with:
#      test_type: all-test


#  unit-codecov_finish:
##    name: Organize and generate the testing report and upload it to Codecov
##    if: github.ref_name == 'release' || github.ref_name == 'master'
#    needs: [unit-test_codecov]
#    uses: ./.github/workflows/upload_test_report_to_codecov.yaml
#    secrets:
#      codecov_token: ${{ secrets.CODECOV_TOKEN }}
#    with:
#      download_path: ./
#      test_type: unit-test
#      codecov_flags: unit
#      codecov_name: smoothcrawler-appintegration_github-actions_test # optional
#
#
#  integration-codecov_finish:
##    name: Organize and generate the testing report and upload it to Codecov
##    if: github.ref_name == 'release' || github.ref_name == 'master'
#    needs: [integration-test_codecov]
#    uses: ./.github/workflows/upload_test_report_to_codecov.yaml
#    secrets:
#      codecov_token: ${{ secrets.CODECOV_TOKEN }}
#    with:
#      download_path: ./
#      test_type: integration-test
#      codecov_flags: integration
#      codecov_name: smoothcrawler-appintegration_github-actions_test # optional


  codecov_finish:
#    name: Organize and generate the testing report and upload it to Codecov
#    if: github.ref_name == 'release' || github.ref_name == 'master'
    needs: [unit-test_codecov, integration-test_codecov]
    uses: ./.github/workflows/upload_test_cov_report.yaml
    secrets:
      codecov_token: ${{ secrets.CODECOV_TOKEN }}
    with:
      upload-to-codecov: true
#      codecov_flags: unit,integration
#      codecov_name: smoothcrawler-appintegration_github-actions_test # optional


  coveralls_finish:
#    name: Organize and generate the testing report and upload it to Coveralls
#    if: github.ref_name == 'release' || github.ref_name == 'master'
    needs: [unit-test_codecov, integration-test_codecov]
    uses: ./.github/workflows/upload_test_cov_report.yaml
    secrets:
      coveralls_token: ${{ secrets.COVERALLS_TOKEN }}
    with:
      upload-to-coveralls: true


  codacy_finish:
#    name: Upload test report to Codacy to analyse and record code quality
    needs: [unit-test_codecov, integration-test_codecov]
    uses: ./.github/workflows/upload_test_cov_report.yaml
    secrets:
      codacy_token: ${{ secrets.CODACY_PROJECT_TOKEN }}
    with:
      upload-to-codacy: true


#  pre-building_check:
##    name: Check about it could work finely by installing the Python package with setup.py file
#    needs: [codecov_finish, codacy_finish]
#    uses: Chisanan232/GitHub-Action-Template-Python/.github/workflows/upload_code_report_to_codacy.yaml
#    with:
#      python_package_name: smoothcrawler
#      test_import_package_code_1: import smoothcrawler as mr
#      test_import_package_code_2: from smoothcrawler.crawler import SimpleCrawler
#      test_import_package_code_3: from smoothcrawler.components.data import BaseHTTPResponseParser, BaseDataHandler
#      test_python_script: ./scripts/test_crawler.py

