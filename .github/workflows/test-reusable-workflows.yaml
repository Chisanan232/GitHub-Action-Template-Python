name: Github-Action reusable workflows test (multi-tests)
on:
  push:
    branches:
      - "develop"
      - "release"
      - "release-**"
      - "release/**"
      - "master"
    paths-ignore:
      - ".gitcommitrules"
      - ".gitignore"
      - "LICENSE"
      - "README.md"
  pull_request:
    branches:
      - "develop"
      - "release"
      - "release-**"
      - "release/**"
    paths-ignore:
      - ".gitcommitrules"
      - ".gitignore"
      - "LICENSE"
      - "README.md"

jobs:

  prep-testbed_unit-test:
#    name: Prepare all unit test items
    uses: ./.github/workflows/prepare_test_items.yaml
    with:
      shell_path: scripts/ci/get-unit-test-paths.sh
      shell_arg: unix


  prep-testbed_integration-test:
#    name: Prepare all integration test items
    uses: ./.github/workflows/prepare_test_items.yaml
    with:
      shell_path: scripts/ci/get-integration-test-paths.sh
      shell_arg: unix


  run_unit-test:
#    name: Run all unit test items
    needs: prep-testbed_unit-test
    uses: ./.github/workflows/run_test_items_via_pytest.yaml
    with:
      test_type: unit-test
      all_test_items_paths: ${{needs.prep-testbed_unit-test.outputs.all_test_items}}
      debug_mode: true


  run_integration-test:
#    name: Run all integration test items. This testing would test the code with other resource or system to ensure the features work finely.
    needs: prep-testbed_integration-test
    uses: ./.github/workflows/run_test_items_via_pytest.yaml
    with:
      test_type: integration-test
      all_test_items_paths: ${{needs.prep-testbed_integration-test.outputs.all_test_items}}
      setup_http_server: true
      http_server_host: 0.0.0.0
      http_server_port: 30303
      http_server_app_module: test._http_server.app
      http_server_enter_point: app
      debug_mode: true


  unit-test_codecov:
#    name: Organize and generate the testing report and upload it to Codecov
    needs: run_unit-test
    uses: ./.github/workflows/organize_and_generate_test_cov_reports.yaml
    with:
      test_type: unit-test


  integration-test_codecov:
#    name: Organize and generate the testing report and upload it to Codecov
    needs: run_integration-test
    uses: ./.github/workflows/organize_and_generate_test_cov_reports.yaml
    with:
      test_type: integration-test


  codecov_finish:
#    name: Organize and generate the testing report and upload it to Codecov
#    if: github.ref_name == 'release' || github.ref_name == 'master'
    needs: [unit-test_codecov, integration-test_codecov]
    uses: ./.github/workflows/upload_test_cov_report.yaml
    secrets:
      codecov_token: ${{ secrets.CODECOV_TOKEN }}
    with:
      test_type: all-test
      upload-to-codecov: true
      codecov_flags: unit,integration  # Required if 'upload-to-codecov' is true
      codecov_name: gh_workflow_template  # Required if 'upload-to-codecov' is true


  coveralls_finish:
#    name: Organize and generate the testing report and upload it to Coveralls
#    if: github.ref_name == 'release' || github.ref_name == 'master'
    needs: [unit-test_codecov, integration-test_codecov]
    uses: ./.github/workflows/upload_test_cov_report.yaml
    secrets:
      coveralls_token: ${{ secrets.COVERALLS_TOKEN }}
    with:
      test_type: all-test
      upload-to-coveralls: true


  codacy_finish:
#    name: Upload test report to Codacy to analyse and record code quality
    needs: [unit-test_codecov, integration-test_codecov]
    uses: ./.github/workflows/upload_test_cov_report.yaml
    secrets:
      codacy_token: ${{ secrets.CODACY_PROJECT_TOKEN }}
    with:
      test_type: all-test
      upload-to-codacy: true


#  pre-building_check:
##    name: Check about it could work finely by installing the Python package with setup.py file
#    needs: [codecov_finish, codacy_finish]
#    uses: Chisanan232/GitHub-Action-Template-Python/.github/workflows/upload_code_report_to_codacy.yaml
#    with:
#      python_package_name: smoothcrawler
#      test_import_package_code_1: import smoothcrawler as mr
#      test_import_package_code_2: from smoothcrawler.crawler import SimpleCrawler
#      test_import_package_code_3: from smoothcrawler.components.data import BaseHTTPResponseParser, BaseDataHandler
#      test_python_script: ./scripts/test_crawler.py


  build_git-tag_and_create_github-release:
#    name: Build git tag and GitHub release if it needs
#    if: github.event_name == 'push'
    needs: [codecov_finish, coveralls_finish, codacy_finish]
    uses: ./.github/workflows/build_git-tag_and_create_github-release.yaml
    with:
      project_type: github-action-reusable-workflow
#      activate_git_event: push
      debug_mode: true

#    runs-on: ubuntu-latest
#    outputs:
#      release_type: ${{ steps.release_checking.outputs.run_result }}
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: Build git tag and create GitHub release
#        id: release_checking
#        run: |
#          release=$(bash ./scripts/ci/build_git-tag_or_create_github-release.sh 'github-action-reusable-workflow' 'true')
#          echo "release: $release"
#
#          release_version=$(echo "$release" | grep -E "\[GitHub Action - Reusable workflow\] \[Final Running Result\] Official-Release and version: ([0-9]{1,})" | grep -E -o "([0-9]{1,})")
#          echo "release_version: $release_version"
#
#          echo "::set-output name=run_result::$(echo $release_version)"


  deploy_as_new_branch:
#    name: Create new git branch by the tagged commit
#    if: ${{ github.event_name == 'push' &&
#                needs.build_git-tag_and_create_github-release.outputs.release_type != 'Initial' &&
#                needs.build_git-tag_and_create_github-release.outputs.release_type != 'Pre' }}
    needs: build_git-tag_and_create_github-release
    if: ${{ github.event_name == 'push' && 
                needs.build_git-tag_and_create_github-release.outputs.github-action_reusable_workflow_release_version != 'Initial' && 
                needs.build_git-tag_and_create_github-release.outputs.github-action_reusable_workflow_release_version != 'Pre' }}
    runs-on: ubuntu-latest
    env:
#      RELEASE_TYPE: ${{ needs.build_git-tag_and_create_github-release.outputs.release_type }}
      RELEASE_TYPE: ${{ needs.build_git-tag_and_create_github-release.outputs.github-action_reusable_workflow_release_version }}
    steps:
      - uses: actions/checkout@v2

      - name: Create new git branch by the tagged commit
        run: bash ./scripts/ci/deployment_new_version_workflow.sh 'true'

